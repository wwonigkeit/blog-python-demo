description: "This is a serverless code execution example for using a Python container"

# This can be tested usng the following curl command to test:

functions:
  - id: python
    image: gcr.io/direktiv/functions/python:1.0
    type: knative-workflow

states:
  - id: get-tweets
    type: action
    action:
      # Get the contents for the Python code and the requirements from an
      # internal Direktiv variable
      files:
      - key: get-tweets.py
        scope: workflow
      - key: requirements.txt
        scope: workflow
      # Call the Python container
      function: python
      input:
        commands:
        - command: pyenv local 3.8.13
        - command: python3 -m pip install -r requirements.txt
        - command: python3 get-tweets.py -b jq(.bearer_token) -t jq(.twitter_searchstring) -m jq(.max_search_returns)
    transform: 'jq({ tweets: .return.python[2].result })'
    transition: get-lang

  - id: get-lang
    type: foreach
    array: 'jq(.tweets)'
    action:
      # Get the contents for the Python code and the requirements from an
      # internal Direktiv variable
      files:
      - key: get-lang.py
        scope: workflow
      # Call the Python container
      secrets: ["GCP_KEY"]
      function: python
      input:
        files:
        - name: gcp.key
          data: |
            jq(.secrets.GCP_KEY)
        commands:
        - command: pyenv local 3.8.13
        - command: python3 get-lang.py -m "'jq(.tweet_text)'" -g gcp.key
    transform: 'jq({results: [del (.tweets) | .return[].python[1].result.langresult]})'

